import{env as t}from"./env.mjs";import{uid as e}from"./uid.mjs";import{calculateModifier as i}from"./character.mjs";class s extends HTMLElement{constructor(){super(),this.handleSubmit=t=>{t.preventDefault(),this.saveCharacter(!1)},this.handleButtonClick=t=>{const e=t.currentTarget,i=parseInt(e.dataset.direction),s=this.pages[this.page].querySelectorAll("input, textarea, select");let r=!0;s.forEach(t=>{t.required&&""===t.value&&(r=!1)}),r||-1===i?(this.page+=i,this.update()):this.form.reportValidity()},this.handleAbilityInput=t=>{const e=t.currentTarget,s=e.name.replace(/(fields\[)|(\])/g,""),r=parseInt(e.value),a=i(r);this.modifiers[s]=a},this.handleSubmitButton=e=>{e.preventDefault(),t.startLoading(),this.saveCharacter(!0)},this.page=0,this.form=this.querySelector("form"),this.buttons=Array.from(this.querySelectorAll('button[type="button"][data-direction]')),this.pages=Array.from(this.querySelectorAll("form-page")),this.classInput=this.querySelector('select[name="fields[class]"]'),this.modifiers={strength:0,dexterity:0,constitution:0,intelligence:0,wisdom:0,charisma:0},this.countdown=300,this.entryId=this.dataset.characterId}getSavingThrows(){const t={...this.modifiers};switch(this.classInput.value){case"Wizard":t.intelligence+=2,t.wisdom+=2;break;case"Barbarian":t.strength+=2,t.constitution+=2;break;case"Bard":t.dexterity+=2,t.charisma+=2;break;case"Cleric":t.wisdom+=2,t.charisma+=2;break;case"Druid":t.intelligence+=2,t.wisdom+=2;break;case"Fighter":t.strength+=2,t.constitution+=2;break;case"Monk":t.strength+=2,t.dexterity+=2;break;case"Paladin":t.wisdom+=2,t.charisma+=2;break;case"Ranger":t.strength+=2,t.dexterity+=2;break;case"Rogue":t.dexterity+=2,t.intelligence+=2;break;case"Sorcerer":t.constitution+=2,t.charisma+=2;break;case"Warlock":t.wisdom+=2,t.charisma+=2}return t}getSkills(){const t={};return this.querySelectorAll("skill-component input").forEach(e=>{t[e.dataset.skill]=this.modifiers[e.dataset.ability],e.checked&&(t[e.dataset.skill]+=2)}),t}getProficientSkills(){const t={};return this.querySelectorAll("skill-component input").forEach(e=>{e.checked?t[e.dataset.skill]=1:t[e.dataset.skill]=0}),t}getHitDice(){switch(this.classInput.value){case"Wizard":return"d6";case"Barbarian":return"d12";case"Bard":case"Cleric":case"Druid":return"d8";case"Fighter":return"d10";case"Monk":return"d8";case"Paladin":case"Ranger":return"d10";case"Rogue":return"d8";case"Sorcerer":return"d6";case"Warlock":return"d8";default:return""}}getHitPoints(){switch(this.classInput.value){case"Barbarian":return""+(12+this.modifiers.constitution);case"Bard":case"Cleric":case"Druid":return""+(8+this.modifiers.constitution);case"Fighter":return""+(10+this.modifiers.constitution);case"Monk":return""+(8+this.modifiers.constitution);case"Paladin":case"Ranger":return""+(10+this.modifiers.constitution);case"Rogue":return""+(8+this.modifiers.constitution);case"Sorcerer":return""+(6+this.modifiers.constitution);case"Warlock":return""+(8+this.modifiers.constitution);case"Wizard":return""+(6+this.modifiers.constitution);default:return"0"}}async saveCharacter(t=!1){if(this.isSaving)return;this.isSaving=!0;const i=new FormData(this.form);t?i.append("enabled","1"):i.append("enabled","0"),""===this.form.querySelector('input[name="title"]').value&&i.set("title",e());for(const[t,e]of Object.entries(this.modifiers))i.append(`fields[${t}Modifier]`,""+e);this.entryId&&i.append("entryId",this.entryId);const s=this.getSavingThrows();for(const[t,e]of Object.entries(s))i.append(`fields[${t}SavingThrow]`,""+e);const r=this.getSkills();for(const[t,e]of Object.entries(r))i.append(`fields[${t}]`,""+e);const a=this.getProficientSkills();for(const[t,e]of Object.entries(a))i.append(`fields[${t}Proficiency]`,""+e);i.append("fields[passiveWisdom]",""+(r.perception+10)),i.append("fields[initiative]",""+this.modifiers.dexterity);const n=this.getHitDice();i.append("fields[hitDice]",n),i.append("fields[currentHitDice]","1");const o=this.getHitPoints();i.append("fields[currentHitPoints]",o),i.append("fields[maximumHitPoints]",o);const c=await fetch(location.origin+"/actions/entries/save-entry",{method:"POST",body:i,headers:new Headers({Accept:"application/json"}),credentials:"include"});if(c.ok){const e=await c.json();e.success&&(this.entryId=e.id,t&&(window.location.href=""+location.origin))}else{await c.text()}this.isSaving=!1,this.countdown=300}update(){window.scrollTo({top:0,left:0,behavior:"smooth"});for(let t=0;t<this.pages.length;t++)t!==this.page?this.pages[t].style.display="none":this.pages[t].style.display="grid"}autoSave(){const t=performance.now(),e=(t-this.time)/1e3;this.time=t,this.isSaving||(this.countdown-=e,this.countdown<=0&&this.isActive&&this.saveCharacter()),window.requestAnimationFrame(this.autoSave.bind(this))}disconnectedCallback(){this.isActive=!1,this.countdown=0,this.autoSave=()=>{}}connectedCallback(){this.form.addEventListener("submit",this.handleSubmit),this.querySelector('button[type="submit"]').addEventListener("click",this.handleSubmitButton);for(let t=0;t<this.buttons.length;t++)this.buttons[t].addEventListener("click",this.handleButtonClick);this.querySelectorAll("#abilities input").forEach(t=>{t.addEventListener("input",this.handleAbilityInput)}),this.dataset.preventSave||(this.isActive=!0,this.time=performance.now(),this.autoSave())}}customElements.define("character-creator",s);