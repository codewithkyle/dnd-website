import{env as t}from"./env.mjs";import{snackbar as e}from"./notifyjs.mjs";import{DiceRoller as i}from"./rpg-dice-roller.mjs";import{calculateModifier as s}from"./character.mjs";class n extends HTMLElement{constructor(){super(),this.autofill=()=>{this.strengthInput.value=""+this.getAbilityScore(),this.dexterityInput.value=""+this.getAbilityScore(),this.constitutionInput.value=""+this.getAbilityScore(),this.intelligenceInput.value=""+this.getAbilityScore(),this.wisdomInput.value=""+this.getAbilityScore(),this.charismaInput.value=""+this.getAbilityScore(),this.strengthInput.parentElement.classList.add("has-value"),this.dexterityInput.parentElement.classList.add("has-value"),this.constitutionInput.parentElement.classList.add("has-value"),this.intelligenceInput.parentElement.classList.add("has-value"),this.wisdomInput.parentElement.classList.add("has-value"),this.charismaInput.parentElement.classList.add("has-value");const t=this.querySelector('input[name="fields[strengthModifier]"]'),e=this.querySelector('input[name="fields[dexterityModifier]"]'),i=this.querySelector('input[name="fields[constitutionModifier]"]'),n=this.querySelector('input[name="fields[intelligenceModifier]"]'),a=this.querySelector('input[name="fields[wisdomModifier]"]'),l=this.querySelector('input[name="fields[charismaModifier]"]');t.value=""+s(parseInt(this.strengthInput.value)),e.value=""+s(parseInt(this.dexterityInput.value)),i.value=""+s(parseInt(this.constitutionInput.value)),n.value=""+s(parseInt(this.intelligenceInput.value)),a.value=""+s(parseInt(this.wisdomInput.value)),l.value=""+s(parseInt(this.charismaInput.value)),this.inititativeInput.value=e.value,this.inititativeInput.parentElement.classList.add("has-value"),this.acInput.value=""+(10+parseInt(e.value)),this.acInput.parentElement.classList.add("has-value")},this.saveNPC=t=>{t.preventDefault(),this.save()},this.handleAbilityInput=t=>{const e=t.currentTarget,i=e.name.replace(/(fields\[)|(\])/g,""),n=this.querySelector(`input[name="fields[${i}Modifier]"]`);n.value=""+s(parseInt(e.value)),"dexterity"===i&&(this.inititativeInput.value=n.value,this.intelligenceInput.parentElement.classList.add("has-value"),this.acInput.value=""+(10+parseInt(n.value)),this.acInput.parentElement.classList.add("has-value"))},this.form=this.querySelector("form"),this.strengthInput=this.querySelector('input[name="fields[strength]"]'),this.dexterityInput=this.querySelector('input[name="fields[dexterity]"]'),this.constitutionInput=this.querySelector('input[name="fields[constitution]"]'),this.intelligenceInput=this.querySelector('input[name="fields[intelligence]"]'),this.wisdomInput=this.querySelector('input[name="fields[wisdom]"]'),this.charismaInput=this.querySelector('input[name="fields[charisma]"]'),this.inititativeInput=this.querySelector('input[name="fields[initiative]"]'),this.acInput=this.querySelector('input[name="fields[armorClass]"]'),this.isSaving=!1,this.dice=new i}diceRoller(t){let e=this.dice.roll(t).toString().match(/\[.*\]/g)[0].replace(/(\[)|(\])/g,"").split(",");Array.isArray(e)||(e=[...e]);for(let t=0;t<e.length;t++){const i=parseInt(e[t]);e.splice(t,1,i)}return e}getAbilityScore(){const t=this.diceRoller("4d6");let e=9999;for(let i=0;i<t.length;i++)t[i]<e&&(e=t[i]);for(let i=0;i<t.length;i++)if(t[i]===e){t.splice(i,1);break}let i=0;for(let e=0;e<t.length;e++)i+=t[e];return i}async save(){if(this.isSaving)return;const i=t.startLoading();this.isSaving=!0;const s=new FormData(this.form),n=await fetch(location.origin+"/actions/entries/save-entry",{method:"POST",body:s,headers:new Headers({Accept:"application/json"}),credentials:"include"});if(n.ok){(await n.json()).success&&(window.location.href=`${location.origin}/campaign/${this.dataset.campaignUid}`)}else{await n.text();e({message:"Failed to create NPC, try again later.",closeable:!0,force:!0}),t.stopLoading(i)}this.isSaving=!1}connectedCallback(){this.form.addEventListener("submit",this.saveNPC),this.querySelector("#auto-fill").addEventListener("click",this.autofill),this.strengthInput.addEventListener("input",this.handleAbilityInput),this.dexterityInput.addEventListener("input",this.handleAbilityInput),this.constitutionInput.addEventListener("input",this.handleAbilityInput),this.intelligenceInput.addEventListener("input",this.handleAbilityInput),this.wisdomInput.addEventListener("input",this.handleAbilityInput),this.charismaInput.addEventListener("input",this.handleAbilityInput)}}customElements.define("npc-creator",n);