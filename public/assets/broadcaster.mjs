function e(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}class s{constructor(){this.worker,this.setupBroadcastWorker(),this.inboxes=[],this.messageQueue=[],this.state={allowMessaging:!1},window.addEventListener("unload",()=>{this.worker.postMessage({recipient:"broadcast-worker",data:{type:"unload"}})})}async setupBroadcastWorker(){let e,s=await fetch("/broadcaster-worker.min.js");if(s.ok){const a=await s.blob();e=URL.createObjectURL(a)}else if(s=await fetch("https://cdn.jsdelivr.net/npm/wwibs@0.0.9/wwibs-worker.min.js"),s.ok){const a=await s.blob();e=URL.createObjectURL(a)}e&&(this.worker=new Worker(e),this.worker.onmessage=this.handleWorkerMessage.bind(this))}flushMessageQueue(){if(this.state.allowMessaging=!0,this.messageQueue.length)for(let e=0;e<this.messageQueue.length;e++)this.worker.postMessage(this.messageQueue[e]);this.messageQueue=[]}sendDataToInboxes(e,s){for(let a=0;a<e.length;a++)try{this.inboxes[e[a]].callback(s)}catch(s){this.disconnectInbox(this.inboxes[e[a]],e[a])}}handleWorkerMessage(e){var s;const a=e.data;"broadcaster"===(null===(s=a.recipient)||void 0===s?void 0:s.trim().toLowerCase())?this.inbox(a.data):this.sendDataToInboxes(a.inboxIndexes,a.data)}sendUserDeviceInformation(){var e,s;const a={senderID:null,recipient:"broadcast-worker",messageId:null,maxAttempts:1,data:{type:"init",memory:null!==(s=null===(e=window.navigator)||void 0===e?void 0:e.deviceMemory)&&void 0!==s?s:8,isSafari:navigator.userAgent.search("Safari")>=0&&navigator.userAgent.search("Chrome")<0}};this.postMessageToWorker(a)}inbox(e){const{type:s}=e;switch(s){case"worker-ready":this.flushMessageQueue(),this.sendUserDeviceInformation();break;case"cleanup-complete":this.state.allowMessaging=!0,this.flushMessageQueue();break;case"cleanup":this.cleanup()}}message(s,a,t=null,o=1){let n=o;(isNaN(n)||n<1)&&(n=1);const l={senderID:t,recipient:s,data:a,messageId:e(),maxAttempts:n};this.postMessageToWorker(l)}hookup(s,a){const t={callback:a,uid:e()},o=this.inboxes.length;this.inboxes.push(t);const n={senderID:t.uid,recipient:"broadcast-worker",messageId:null,maxAttempts:1,data:{type:"hookup",name:s,inboxAddress:o,uid:t.uid}};return this.postMessageToWorker(n),t.uid}disconnect(e){for(let s=0;s<this.inboxes.length;s++){const a=this.inboxes[s];if(a.uid===e){this.disconnectInbox(a,s);break}}}reply(s,a,t=null,o=1){let n=o;(isNaN(n)||n<1)&&(n=1);const l={replyID:s,senderID:t,data:a,messageId:e(),maxAttempts:n};this.postMessageToWorker(l)}replyAll(s,a,t=null,o=1){let n=o;(isNaN(n)||n<1)&&(n=1);const l={replyID:s,senderID:t,data:a,messageId:e(),maxAttempts:n,replyAll:!0};this.postMessageToWorker(l)}disconnectInbox(e,s){e.disconnected=!0,e.callback=()=>{};const a={senderID:null,recipient:"broadcast-worker",messageId:null,maxAttempts:1,data:{type:"disconnect",inboxAddress:s}};this.postMessageToWorker(a)}postMessageToWorker(e){this.state.allowMessaging?this.worker.postMessage(e):this.messageQueue.push(e)}cleanup(){this.state.allowMessaging=!1;const e=[],s=[];for(let a=0;a<this.inboxes.length;a++){const t=this.inboxes[a];if(!(null==t?void 0:t.disconnected)){const o={oldAddressIndex:a,newAddressIndex:s.length};s.push(t),e.push(o)}}this.inboxes=s;const a={senderID:null,recipient:"broadcast-worker",messageId:null,maxAttempts:1,data:{type:"update-addresses",addresses:e}};this.worker.postMessage(a)}}let a=document.head.querySelector("script#broadcaster")||null;a||(a=document.createElement("script"),a.id="broadcaster",a.innerHTML="window.globalManager = null;window.globalMessage = null;window.globalHookup = null;window.globalDisconnect = null;window.globalReply = null;window.globalReplyAll = null;",document.head.appendChild(a),globalManager=new s),globalMessage=globalManager.message.bind(globalManager);const t=globalMessage;globalHookup=globalManager.hookup.bind(globalManager);const o=globalHookup;globalDisconnect=globalManager.disconnect.bind(globalManager);const n=globalDisconnect;globalReply=globalManager.reply.bind(globalManager);const l=globalReply;globalReplyAll=globalManager.replyAll.bind(globalManager);const r=globalReplyAll;export{n as disconnect,o as hookup,t as message,l as reply,r as replyAll};