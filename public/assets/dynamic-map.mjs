import{hookup as t,disconnect as e,message as s}from"./broadcaster.mjs";class i extends HTMLElement{constructor(){super(),this.handleMouseDown=t=>{this.mouse.active=!0;const e=this.getCords(t);this.context.beginPath(),this.context.moveTo(e.x,e.y),this.xyLast=e},this.handleMouseUp=t=>{this.context.stroke(),this.mouse.active=!1,s("server",{type:"render-drawing",drawing:this.canvas.toDataURL()})},this.handleMouseMove=t=>{if(!this.mouse.active)return;t.preventDefault(),t.stopImmediatePropagation();const e=this.getCords(t),s={x:(this.xyLast.x+e.x)/2,y:(this.xyLast.y+e.y)/2};this.context.quadraticCurveTo(this.xyLast.x,this.xyLast.y,s.x,s.y),this.context.stroke(),this.context.beginPath(),this.context.moveTo(s.x,s.y),this.xyLast=e},this.mouse={x:0,y:0,prevX:0,prevY:0,active:!1},this.xyLast={x:null,y:null},this.inboxUid=t("dynamic-map",this.inbox.bind(this)),this.map=null,window.addEventListener("resize",()=>{window.location.reload()})}inbox(t){switch(t.type){case"render":const e=new Image;e.src=t.drawing,e.onload=()=>{this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(e,0,0,e.width,e.height)};break;case"clear":this.context.clearRect(0,0,this.canvas.width,this.canvas.height);break;case"init":this.init(t.map,t.drawing)}}getCords(t){let e,s;if(t.changedTouches&&t.changedTouches[0]){const i=this.canvas.offsetTop,a=this.canvas.offsetTop;e=t.changedTouches[0].pageX-a,s=t.changedTouches[0].pageY-i}else t.layerX||0==t.layerX?(e=t.layerX,s=t.layerY):(t.offsetX||0==t.offsetX)&&(e=t.offsetX,s=t.offsetY);return{x:e,y:s}}disconnectCallback(){e(this.inboxUid)}init(t,e){if(!this.map||this.map!==t){this.canvas=this.querySelector("canvas");const s=this.getBoundingClientRect();if(this.canvas.width=s.width,this.canvas.height=s.height,this.context=this.canvas.getContext("2d"),this.context.lineWidth=2,this.context.lineCap="round",this.context.strokeStyle="#ed1313",this.canvas.addEventListener("mousedown",this.handleMouseDown),this.canvas.addEventListener("mouseup",this.handleMouseUp),this.canvas.addEventListener("mousemove",this.handleMouseMove),this.map=t,this.context.clearRect(0,0,this.canvas.width,this.canvas.height),e){const t=new Image;t.src=e,t.onload=()=>{this.context.drawImage(t,0,0,t.width,t.height)}}}}}customElements.define("dynamic-map",i);